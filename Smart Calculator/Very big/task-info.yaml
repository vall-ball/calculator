type: edu
custom_name: stage8
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import calculator.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = 32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = 2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c  ").trim();
                        if (!output.equals("2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 13 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test case with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // test suit for the 8th stage with very large numbers
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 32000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute(
                            "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - n - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong(
                                "The program cannot process addition " +
                                    "and subtraction operations correctly.");
                        }

                        // testing reassignment with big values
                        output = main.execute("c = n \nc = 2000000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("2000000000000000000000")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11000000000000000000 - 9000000000000000000 - " +
                                "c + 1998000000000000000000").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5000000000000000000 --- 2000000000000000000 " +
                                "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                        if (!output.equals("10000000000000000000")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // testing all operators, with variables
                        main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                        output = main.execute("a * 4000000000000000000 / " +
                                "b - (3000000000000000000 - 1000000000000000000)").trim();
                        if (!output.equals("12000000000000000000")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })

            );
        }
    }
  learner_created: false
- name: src/calculator/StringCalculator.java
  visible: true
  text: |-
    package calculator;

    import java.util.ArrayDeque;
    import java.util.ArrayList;
    import java.util.Deque;
    import java.util.List;

    public class StringCalculator {

        Variables variables = new Variables();

        public List<String> toPostfixNotation(List<String> list) {
            List<String> answer = new ArrayList<>();
            Deque<String> stack = new ArrayDeque<>();
            int i = 0;
            while (i != list.size()) {
                if (list.get(i).matches("[\\-\\+]")) {
                    if (stack.size() != 0 && stack.getLast().matches("[\\-\\+\\*/]")) {
                        answer.add(stack.pollLast());
                        stack.offerLast(list.get(i));
                    } else {
                        stack.offerLast(list.get(i));
                    }
                } else if (list.get(i).matches("[\\*/]")) {
                    if (stack.size() != 0 && stack.getLast().matches("[\\*/]")) {
                        answer.add(stack.pollLast());
                        stack.offerLast(list.get(i));
                    } else {
                        stack.offerLast(list.get(i));
                    }
                } else if (list.get(i).equals("(")) {
                    stack.offerLast(list.get(i));
                } else if (list.get(i).equals(")")) {
                    while (!stack.getLast().equals("(")) {
                        answer.add(stack.pollLast());
                    }
                    stack.pollLast();
                } else if (list.get(i).matches("\\D+")) {
                    answer.add(Integer.toString(variables.getVariable(list.get(i))));
                } else {
                    answer.add(list.get(i));
                }
                i++;
            }
            while (stack.size() != 0) {
                answer.add(stack.pollLast());
            }
            return answer;
        }

        public int calculate(List<String> postfix) {
            Deque<String> stack = new ArrayDeque<>();
            int i = 0;
            while (i != postfix.size()) {
                if (!isOperator(postfix.get(i))) {
                    stack.offerLast(postfix.get(i));
                    i++;
                } else {
                    int a = Integer.parseInt(stack.pollLast());
                    int b = Integer.parseInt(stack.pollLast());
                    if (postfix.get(i).equals("+")) {
                        stack.offerLast(Integer.toString(b + a));
                    }
                    if (postfix.get(i).equals("-")) {
                        stack.offerLast(Integer.toString(b - a));
                    }
                    if (postfix.get(i).equals("*")) {
                        stack.offerLast(Integer.toString(b * a));
                    }
                    if (postfix.get(i).equals("/")) {
                        stack.offerLast(Integer.toString(b / a));
                    }
                    i++;
                }
            }
            return Integer.parseInt(stack.pollLast());
        }

        public boolean isOperator(String s) {
            return s.equals("+") || s.equals("-") || s.equals("*") || s.equals("/");
        }

        public void handleVariables(String str) throws Exception {
            String[] arr = str.split("=");
            if (arr[1].trim().matches("\\D+")) {
                if (!variables.isVariable(arr[1].trim())) {
                    throw new Exception("Unknown variable");
                }
                variables.add(arr[0].trim(), variables.getVariable(arr[1].trim()));
            } else {
                variables.add(arr[0].trim(), Integer.parseInt(arr[1].trim()));
            }
        }

    }


    /*
        public int calc(String str) throws Exception {

            String[] arr = str.split("\\s+");
            int answer = 0;
            int i = 0;

            if (arr.length == 1) {
                if (arr[0].matches("[0-9]+")) {
                    return Integer.parseInt(arr[0]);
                } else {
                    if (!variables.isVariable(arr[0])) {
                        throw new Exception("Unknown variable");
                    }
                    return variables.getVariable(arr[0]);
                }
            }

            while (i != arr.length) {
                if ("-".equals(arr[i])) {
                    i++;
                    if (arr[i].matches("\\D+")) {
                        answer -= variables.getVariable(arr[i]);
                    } else {
                        answer -= Integer.parseInt(arr[i]);
                    }
                    i++;
                } else if ("+".equals(arr[i])) {
                    i++;
                    if (arr[i].matches("\\D+")) {
                        answer += variables.getVariable(arr[i]);
                    } else {
                        answer += Integer.parseInt(arr[i]);
                    }
                    i++;
                } else {
                    if (arr[i].matches("\\D+")) {
                        answer += variables.getVariable(arr[i]);
                    } else {
                        answer += Integer.parseInt(arr[i]);
                    }
                    i++;
                }
            }
            return answer;
        }

        public void handleVariables(String str) throws Exception {
            String[] arr = str.split("=");
            if (arr[1].trim().matches("\\D+")) {
                if (!variables.isVariable(arr[1].trim())) {
                    throw new Exception("Unknown variable");
                }
                variables.add(arr[0].trim(), variables.getVariable(arr[1].trim()));
            } else {
                variables.add(arr[0].trim(), Integer.parseInt(arr[1].trim()));
            }
        }

        public int numberOfParentheses (String expression) {
            char[] arr = expression.toCharArray();
            int answer = 0;
            for (char c : arr) {
                if (c ==')' || c == '(') {
                    answer++;
                }
            }
            return answer;
        }

        public int calculateResult(String[] postfix) {
        return 2;
        }
     */
  learner_created: true
- name: src/calculator/ErrorHandler.java
  visible: true
  text: |
    package calculator;

    public class ErrorHandler {

        public boolean isUnknownCommand(String s) {
            return s.matches("^/.*");
        }

        public boolean isInvalidExpression(String s) {
            String s1 = s.replaceAll("\\s+", "");
            if (s1.matches("[\\+\\.\\,\\-]")) {
                //System.out.println("[\\+\\.\\,\\-]");
                return true;
            }

            if (s1.matches("\\D+=[\\D\\d]+")) {
                //System.out.println("\\D+=[\\D\\d]+");
                return false;
            }

            if (s1.matches(".*\\*{2,}.*")) {
                return true;
            }
            if (s1.matches(".*/{2,}.*")) {
                return true;
            }


            if (!s1.matches("[\\D0-9\\+\\-\\.\\,]+")) {
                //System.out.println("[\\D0-9\\+\\-\\.\\,]+");
                return true;
            }
            if (s1.matches(".*[\\-\\+\\.\\,]$")) {
                //System.out.println(".*[\\-\\+\\.\\,]$");
                return true;
            }
            if (!parenthesisEquality(s)) {
                //System.out.println("!parenthesisEquality(s)");
                return true;
            }
            return false;
        }

        public boolean isInvalidAssignment(String s) {
            String s1 = s.replaceAll("\\s+", "");
            if (s1.matches(".+=.+=.+")) {
                return true;
            }
            if (s1.matches(".*=.*\\d.*\\D.*")) {
                return true;
            }
            return false;
        }

        public boolean isInvalidIdentifier(String s) {
            String s1 = s.replaceAll("\\s+", "");
            if (s1.matches(".*[^a-zA-Z]+.*=.*")) {
                return true;
            }
            return false;
        }

        public boolean parenthesisEquality(String expression) {
            int left = 0;
            int right = 0;
            for (int i = 0; i < expression.length(); i++) {
                if (expression.charAt(i) == '(') {
                    left++;
                }
                if (expression.charAt(i) ==')') {
                    right++;
                }
            }
            return left == right;
        }
    }
  learner_created: true
- name: src/calculator/StringParser.java
  visible: true
  text: |
    package calculator;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class StringParser {

        public String prepare(String str) {
            Pattern pattern = Pattern.compile("\\s+");
            Matcher matcher = pattern.matcher(str);
            String a = matcher.replaceAll("");
            pattern = Pattern.compile("(-{2})+");
            matcher = pattern.matcher(a);
            String b = matcher.replaceAll("+");
            pattern = Pattern.compile("\\++");
            matcher = pattern.matcher(b);
            String c = matcher.replaceAll("+");
            pattern = Pattern.compile("\\+\\-|\\-\\+");
            matcher = pattern.matcher(c);
            String d = matcher.replaceAll("-");
            return d;
        }

        public List<String> parseToList(String str) {
            String prepareString = prepare(str);
            List<String> list = new ArrayList<>();
            int end = 0;
            int begin = 0;
            while (end != prepareString.length()) {
                if (isSeparator(prepareString.charAt(end)) && end != 0) {
                    if (isSeparator(prepareString.charAt(end - 1))) {
                        list.add(prepareString.substring(end, end + 1));
                        end++;
                        begin = end;
                    } else {
                        list.add(prepareString.substring(begin, end));
                        list.add(prepareString.substring(end, end + 1));
                        end++;
                        begin = end;
                    }
                } else {
                    end++;
                }
                if (end == prepareString.length() && begin != end) {
                    list.add(prepareString.substring(begin, end));
                }
            }
            return list;
        }

        public boolean isSeparator(char c) {
            return c == '+' || c == '-' || c == '(' || c == ')' || c == '/' || c == '*';
        }

    }
  learner_created: true
- name: src/calculator/Variables.java
  visible: true
  text: |
    package calculator;

    import java.util.HashMap;
    import java.util.Map;

    public class Variables {

        Map<String, Integer> map;

        Variables() {
            map = new HashMap<>();
        }

        public void add(String variable, Integer value) {
            map.put(variable, value);
        }

        public boolean isVariable(String variable) {
            return map.containsKey(variable);
        }

        public Integer getVariable(String variable) {
            return map.get(variable);
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/42/stages/227/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/42/stages/227/implement">JetBrains
    Academy</a>
  time: Sun, 08 Nov 2020 08:21:58 UTC
record: -1
